import json
import logging
import uuid
import datetime
import threading
import time
from typing import Any, Dict, List
from bot.bot import Bot
from bot.handler import MessageHandler, BotButtonCommandHandler, CommandHandler

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

TOKEN = "001.3014776720.0345725419:1011867925"
bot = Bot(token=TOKEN)

# pending_requests —Ö—Ä–∞–Ω–∏—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–æ –∫–ª—é—á—É user_id, –≥–¥–µ –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Å–ª–æ–≤–∞—Ä—å —Å request_id –∫–∞–∫ –∫–ª—é—á–∞–º–∏.
# –°—Ç—Ä—É–∫—Ç—É—Ä–∞: { user_id: { request_id: { "text": ..., "group": ..., "requester_id": ..., "expiry": ... } } }
pending_requests: Dict[str, Dict[str, Any]] = {}
# –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: { request_id: { responder_id: "approved"|"rejected" } }
approval_votes: Dict[str, Dict[str, str]] = {}
# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–∞—Ö: { chat_id: { "groupId": ..., "groupName": ..., "members": [...] } }
chat_members: Dict[str, Dict[str, Any]] = {}

def create_inline_keyboard(buttons_list: List[List[Dict[str, str]]]) -> str:
    return json.dumps(buttons_list)

def parse_expiry_time(input_text: str) -> datetime.datetime:
    """
    –†–∞–∑–±–∏—Ä–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
    –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
        ‚Ä¢ "N –º–∏–Ω" ‚Äî —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç
        ‚Ä¢ "HH:MM" ‚Äî —Å–µ–≥–æ–¥–Ω—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–µ—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ, —Ç–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å)
        ‚Ä¢ "DD.MM HH:MM" ‚Äî —É–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)
        ‚Ä¢ "DD.MM.YYYY HH:MM" ‚Äî –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
    """
    now = datetime.datetime.now()
    try:
        if "–º–∏–Ω" in input_text:
            minutes = int(input_text.split()[0])
            return now + datetime.timedelta(minutes=minutes)
        elif ":" in input_text and len(input_text.split()) == 1:
            hour, minute = map(int, input_text.split(":"))
            expiry_time = now.replace(hour=hour, minute=minute, second=0, microsecond=0)
            return expiry_time if expiry_time > now else expiry_time + datetime.timedelta(days=1)
        elif len(input_text.split()) == 2:
            date_part, time_part = input_text.split()
            day, month = map(int, date_part.split("."))
            hour, minute = map(int, time_part.split(":"))
            year = now.year
            expiry_time = datetime.datetime(year, month, day, hour, minute)
            return expiry_time if expiry_time > now else expiry_time.replace(year=year + 1)
        elif len(input_text.split(".")) == 3:
            # –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç: DD.MM.YYYY HH:MM
            parts = input_text.split()
            if len(parts) != 2:
                return None
            date_part, time_part = parts
            day, month, year = map(int, date_part.split("."))
            hour, minute = map(int, time_part.split(":"))
            return datetime.datetime(year, month, day, hour, minute)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
    return None

def start_vote_timer(user_id: str, request_id: str, deadline: float, group_id: str) -> None:
    """
    –ñ–¥–µ—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∏ –≤—ã–∑—ã–≤–∞–µ—Ç finalize_vote.
    """
    sleep_duration = deadline - time.time()
    if sleep_duration > 0:
        time.sleep(sleep_duration)
    finalize_vote(user_id, request_id, group_id)

def finalize_vote(user_id: str, request_id: str, group_id: str) -> None:
    """
    –ü–æ–¥–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å request_id.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ç–æ–≥ —Å–æ–∑–¥–∞—Ç–µ–ª—é –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç —Ç–µ—Ö, –∫—Ç–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª.
    –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∏–∑ pending_requests –∏ approval_votes.
    """
    if user_id not in pending_requests or request_id not in pending_requests[user_id]:
        return
    request_data = pending_requests[user_id][request_id]
    votes = approval_votes.get(request_id, {})
    approved_count = sum(1 for v in votes.values() if v == "approved")
    rejected_count = sum(1 for v in votes.values() if v == "rejected")
    summary = f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –û–¥–æ–±—Ä–µ–Ω–æ: {approved_count}, –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {rejected_count}"
    requester_id = request_data.get("requester_id", user_id)
    bot.send_text(chat_id=requester_id, text=summary)
    group_info = chat_members.get(group_id, {})
    members = group_info.get("members", [])
    for member in members:
        if member not in votes and member != requester_id:
            bot.send_text(chat_id=member, text="–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å.")
    del pending_requests[user_id][request_id]
    if request_id in approval_votes:
            if user_id in pending_requests:
                if not pending_requests[user_id]:  # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –±–æ–ª—å—à–µ –Ω–µ—Ç, —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    del pending_requests[user_id]
            del approval_votes[request_id]

def show_main_menu(bot: Bot, chat_id: str, is_private_chat: bool) -> None:
    if is_private_chat:
        text = "–ü—Ä–∏–≤–µ—Ç! –£ —Ç–µ–±—è –ø–æ—è–≤–∏–ª–∞—Å—å –∏–¥–µ—è? –î–∞–≤–∞–π, –ø–æ–∫–∞–∂–µ–º –µ—ë"
        buttons = [
            [{"text": "–°–æ–∑–¥–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–ø—Ä—É–≤", "callbackData": "create_approval_request"}],
            [{"text": "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–æ–≤", "callbackData": "to_requests_menu"}]
        ]
    else:
        text = "–ü—Ä–∏–≤–µ—Ç, —á–∞—Ç!"
        buttons = [[{"text": "–û–±–Ω–æ–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞", "callbackData": "update_members"}]]
    bot.send_text(chat_id=chat_id, text=text, inline_keyboard_markup=create_inline_keyboard(buttons))

def show_requests_menu(bot: Bot, chat_id) -> None:
    text = "–°—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–æ–≤"
    buttons = [
        #[{"text": "–°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤", "callbackData": "show_your_requests"}],
        [{"text": "–°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤", "callbackData": "no_callback"}],
        #[{"text": "–¢–≤–æ–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è", "callbackData": "show_another's_requests"}],
        [{"text": "–¢–≤–æ–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è", "callbackData": "no_callback"}],
        [{"text": "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "callbackData": "to_main_menu"}],
    ]
    bot.send_text(chat_id=chat_id, text=text, inline_keyboard_markup=create_inline_keyboard(buttons))

def show_available_groups(bot: Bot, user_id: str) -> None:
    available_groups = [group_info for group_info in chat_members.values() if user_id in group_info.get("members", [])]
    if not available_groups:
        bot.send_text(chat_id=user_id, text="–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–∞—Ö —Å –±–æ—Ç–æ–º.")
        return
    buttons = [
        [{"text": group["groupName"], "callbackData": f"choose_group_{group['groupId']}"}]
        for group in available_groups
    ]
    bot.send_text(chat_id=user_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", inline_keyboard_markup=create_inline_keyboard(buttons))

def handle_buttons(bot: Bot, event: Any) -> None:
    callback_data = event.data.get("callbackData", "")
    chat_id = event.from_chat
    user_id = event.data.get("from", {}).get("userId", "")
    request_id = ""

    if callback_data == "update_members":
        update_members(bot, chat_id)
        return

    if callback_data == "create_approval_request":
        request_id = str(uuid.uuid4())
        if user_id not in pending_requests:
            pending_requests[user_id] = {}
        pending_requests[user_id][request_id] = {"text": "", "group": "", "requester_id": user_id, "expiry": None}
        bot.send_text(chat_id=user_id, text="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–ø—Ä—É–≤:")
        return

    if callback_data == "to_requests_menu":
        show_requests_menu(bot, chat_id)
        return

    if callback_data == "to_main_menu":
        show_main_menu(bot, chat_id, True)  # –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        return

    if callback_data.startswith("choose_group_"):
        group_id = callback_data.replace("choose_group_", "")
        if user_id in pending_requests and len(pending_requests[user_id]) > 0:
            request_id = list(pending_requests[user_id].keys())[-1]
            pending_requests[user_id][request_id]["group"] = group_id
            bot.send_text(chat_id=user_id, text="–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                "üîπ `HH:MM` ‚Äì —Å–µ–≥–æ–¥–Ω—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n"
                "üîπ `N –º–∏–Ω` ‚Äì —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç\n"
                "üîπ `DD.MM HH:MM` ‚Äì —É–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\n"
                "üîπ `DD.MM.YYYY HH:MM` ‚Äì –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è")
        return

    if callback_data.startswith("approve_"):
        request_id = callback_data.split("_", 1)[1]
        if request_id in approval_votes and user_id in approval_votes[request_id]:
            bot.send_text(chat_id=event.from_chat, text="–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏.")
            return
        approval_votes.setdefault(request_id, {})[user_id] = "approved"
        bot.send_text(chat_id=event.from_chat, text="–í—ã –æ–¥–æ–±—Ä–∏–ª–∏ –∑–∞–ø—Ä–æ—Å.")
        found_request = False
        for requester, requests_dict in pending_requests.items():
            if request_id in requests_dict:
                requester_id = requests_dict[request_id].get("requester_id")
                request_text = requests_dict[request_id].get("text", "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞")
                bot.send_text(chat_id=requester_id, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–¥–æ–±—Ä–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å: {request_text}")
                found_request = True
                return
        if not found_request:
            logging.error(f"–ó–∞–ø—Ä–æ—Å —Å request_id {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if callback_data.startswith("reject_"):
        request_id = callback_data.split("_", 1)[1]
        if request_id in approval_votes and user_id in approval_votes[request_id]:
            bot.send_text(chat_id=event.from_chat, text="–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏.")
            return
        approval_votes.setdefault(request_id, {})[user_id] = "rejected"
        bot.send_text(chat_id=event.from_chat, text="–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å.")
        found_request = False
        for requester, requests_dict in pending_requests.items():
            if request_id in requests_dict:
                requester_id = requests_dict[request_id].get("requester_id")
                request_text = requests_dict[request_id].get("text", "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞")
                bot.send_text(chat_id=requester_id, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å: {request_text}")
                found_request = True
                return
        if not found_request:
            logging.error(f"–ó–∞–ø—Ä–æ—Å —Å request_id {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # !!! –£–±—Ä–∞—Ç—å —ç—Ç–æ –ø–æ—Å–ª–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if callback_data == "no_callback":
        return
    # !!!

    # –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫
    show_main_menu(bot, chat_id, chat_id in chat_members)

def handle_message(bot: Bot, event: Any) -> None:
    user_id = event.data.get("from", {}).get("userId", "")
    chat_id = event.from_chat
    chat_type = event.data.get("chat", {}).get("type", "")
    is_private_chat = chat_type == "private"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∏ –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É
    if user_id in pending_requests and len(pending_requests[user_id]) > 0:
        request_id = list(pending_requests[user_id].keys())[-1]
        if pending_requests[user_id][request_id]["text"] == "":
            pending_requests[user_id][request_id]["text"] = event.data.get("text", "")
            show_available_groups(bot, user_id)
        elif pending_requests[user_id][request_id]["expiry"] is None:
            expiry_time = parse_expiry_time(event.data.get("text", ""))
            if expiry_time:
                pending_requests[user_id][request_id]["expiry"] = expiry_time.strftime("%Y-%m-%d %H:%M")
                threading.Thread(target=start_vote_timer, args=(user_id, request_id, expiry_time.timestamp(), pending_requests[user_id][request_id]["group"])).start()
                send_approval_request(bot, user_id, pending_requests[user_id][request_id]["group"], request_id)
            else:
                bot.send_text(chat_id=user_id, text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        show_main_menu(bot, chat_id, is_private_chat)

def update_members(bot: Bot, chat_id: str) -> None:
    try:
        response = bot.get_chat_members(chat_id).json()
        logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç API (get_chat_members): {response}")
        members = response.get('members', [])
        member_ids = [member.get("userId", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ") for member in members]
        
        chat_info = bot.get_chat_info(chat_id).json()
        group_name = chat_info.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        
        chat_members[chat_id] = {
            "groupId": chat_id,
            "groupName": group_name,
            "members": member_ids
        }
        logging.info(f"–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è {chat_id}: {chat_members[chat_id]['members']}")
        bot.send_text(chat_id=chat_id, text=f"–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª—ë–Ω: {len(member_ids)} —á–µ–ª–æ–≤–µ–∫.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
        bot.send_text(chat_id=chat_id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")

def show_available_groups(bot: Bot, user_id: str) -> None:
    available_groups = [group_info for group_info in chat_members.values() if user_id in group_info.get("members", [])]
    if not available_groups:
        bot.send_text(chat_id=user_id, text="–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–∞—Ö —Å –±–æ—Ç–æ–º.")
        return
    buttons = [
        [{"text": group["groupName"], "callbackData": f"choose_group_{group['groupId']}"}]
        for group in available_groups
    ]
    bot.send_text(chat_id=user_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", inline_keyboard_markup=create_inline_keyboard(buttons))

def send_approval_request(bot: Bot, user_id: str, group_id: str, request_id: str) -> None:
    request_data = pending_requests.get(user_id, {}).get(request_id, {})
    request_text = request_data.get("text", "")
    expiry_time = request_data.get("expiry", "")
    if not request_text:
        return
    group_info = chat_members.get(group_id, {})
    members = group_info.get("members", [])
    title = group_info.get("groupName", "...")
    response_buttons = create_inline_keyboard([
        [{"text": "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", "callbackData": f"approve_{request_id}"}],
        [{"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callbackData": f"reject_{request_id}"}]
    ])
    for member in members:
        if member != user_id:
            bot.send_text(chat_id=member, 
                text=f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –∞–ø—Ä—É–≤ –æ—Ç {user_id} –∏–∑ –≥—Ä—É–ø–ø—ã '{title}':\n{request_text}\n‚è≥ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –¥–æ: {expiry_time}",
                inline_keyboard_markup=response_buttons)
    bot.send_text(chat_id=user_id, text="–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    show_main_menu(bot, user_id, True)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
bot.dispatcher.add_handler(MessageHandler(callback=handle_message))
bot.dispatcher.add_handler(BotButtonCommandHandler(callback=handle_buttons))
bot.dispatcher.add_handler(CommandHandler(command="/update_members", callback=update_members))

logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π...")
bot.start_polling()
bot.idle()
