from bot.bot import Bot
from example.storage import pending_requests, current_request, approval_votes, chat_members
from example.logger import logging
from example.features.requests import show_preview_request, show_available_groups
from example.features.groups import update_members
from example.main_menu import show_main_menu
from example.requests_menu import show_requests_menu, show_requests_for_group, show_your_votes
from example.features.requests import show_request_groups
from example.utils import decode_from_callback
from typing import Any
import uuid

def handle_buttons(bot: Bot, event: Any) -> None:
    callback_data = event.data.get("callbackData", "")
    chat_id = event.from_chat
    user_id = event.data.get("from", {}).get("userId", "")
    request_id = ""

    if callback_data == "no_image" and user_id in pending_requests:
        request_id = list(pending_requests[user_id].keys())[-1]
        pending_requests[user_id][request_id]["image"] = None
        pending_requests[user_id][request_id]["stage"] = "group"
        show_preview_request(bot, user_id)
        return

    
    elif callback_data == "preview_ok":
        show_available_groups(bot, user_id)
        return

    elif callback_data == "preview_edit":
        request_id = current_request.get(user_id)
        if request_id:
            req = pending_requests[user_id][request_id]
            req.update({
                "name": "",
                "description": "",
                "image": None,
                "group": "",
                "group_name": "",
                "expiry": None,
                "stage": "name",
                "vote_finalized": False  # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
            })
            bot.send_text(chat_id=user_id, text="–û–∫–µ–π, –Ω–∞—á–Ω—ë–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:")
        return

    if callback_data == "create_approval_request":
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ–∑–¥–∞–≤–∞–ª –∑–∞–ø—Ä–æ—Å, –æ–Ω —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è)
        request_id = str(uuid.uuid4())
        current_request[user_id] = request_id  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º id —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        pending_requests.setdefault(user_id, {})[request_id] = {
            "name": "",
            "description": "",
            "group": "",
            "group_name": "",
            "requester_id": user_id,
            "expiry": None,
            "image": None,
            "stage": "name",
            "vote_finalied": False
        }
        bot.send_text(chat_id=user_id, text = "–ö–∞–∫ –Ω–∞–∑–æ–≤—ë–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–ø—Ä—É–≤?")
        return

    if callback_data in {"to_main_menu", "update_members", "to_requests_menu", "show_your_requests", "show_your_votes"}:
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –µ—Å—Ç—å
        if user_id in current_request:
            current_id = current_request[user_id]
            if user_id in pending_requests and current_id in pending_requests[user_id]:
                req_data = pending_requests[user_id][current_id]
                if not req_data.get("group") or not req_data.get("expiry"):
                    del pending_requests[user_id][current_id]
                    if not pending_requests[user_id]:
                        del pending_requests[user_id]
            del current_request[user_id]
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        if callback_data == "update_members":
            update_members(bot, chat_id)
        elif callback_data == "to_main_menu":
            is_private = ("@chat" not in chat_id)
            show_main_menu(bot, chat_id, is_private)
        elif callback_data == "to_requests_menu":
            show_requests_menu(bot, chat_id)
        elif callback_data == "show_your_requests":
            show_request_groups(bot, user_id, chat_id)
        elif callback_data == "show_your_votes":
            show_your_votes(bot, user_id, chat_id)
        return
    
    if callback_data == "to_requests_menu":
        show_requests_menu(bot, chat_id)
        return
    
    if callback_data == "show_your_requests":
        show_request_groups(bot, user_id, chat_id)
        return
    
    if callback_data.startswith("view_requests_group_"):
        group_id = callback_data.replace("view_requests_group_", "")
        show_requests_for_group(bot, user_id, group_id, chat_id)
        return
    
    if callback_data == "show_your_votes":
        show_your_votes(bot, user_id, chat_id)
        return
    
    if callback_data == "to_main_menu":
        is_private = ("@chat" not in chat_id)
        show_main_menu(bot, chat_id, is_private)
        return
    
    if callback_data.startswith("choose_group_"):
        group_id, group_name = decode_from_callback(callback_data)
        if user_id in current_request:
            request_id = current_request[user_id]
            if user_id in pending_requests and request_id in pending_requests[user_id]:
                req = pending_requests[user_id][request_id]
                req["group"] = group_id
                req["group_name"] = group_name
                req["stage"] = "expiry"
                bot.send_text(
                    chat_id = user_id, 
                    text = "–í–≤–æ–¥–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                        "üîπ HH:MM ‚Äì —Å–µ–≥–æ–¥–Ω—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n"
                        "üîπ N ‚Äì —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç\n"
                        "üîπ DD.MM HH:MM ‚Äì —É–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\n"
                        "üîπ DD.MM.YYYY HH:MM ‚Äì –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è")
        return

    
    if callback_data.startswith("approve_"):
        request_id = callback_data.split("_", 1)[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞–ø—Ä–æ—Å
        if request_id in approval_votes and user_id in approval_votes[request_id]:
            bot.send_text(chat_id=event.from_chat, text="–¢–≤–æ–π –≥–æ–ª–æ—Å —É–∂–µ –∑–∞—Å—á–∏—Ç–∞–Ω")
            return

        approval_votes.setdefault(request_id, {})[user_id] = "–ø—Ä–∏–Ω—è—Ç"
        bot.send_text(chat_id=event.from_chat, text="–ó–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        found_request = False
        for requester, req_dict in pending_requests.items():
            if request_id in req_dict:
                requester_id = req_dict[request_id].get("requester_id")
                request_name = req_dict[request_id].get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                group_name = req_dict[request_id].get("group_name")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                #if not req_dict[request_id].get("vote_finalized", False):
                #    finalize_vote(user_id, request_id, req_dict[request_id].get("group"))
                bot.send_text(
                    chat_id=requester_id, 
                    text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑ –≥—Ä—É–ø–ø—ã \"{group_name}\" –æ–¥–æ–±—Ä–∏–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å \"{request_name}\""
                )
                found_request = True
                return

        if not found_request:
            logging.error(f"–ó–∞–ø—Ä–æ—Å —Å request_id {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    if callback_data.startswith("reject_"):
        request_id = callback_data.split("_", 1)[1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞–ø—Ä–æ—Å
        if request_id in approval_votes and user_id in approval_votes[request_id]:
            bot.send_text(chat_id=event.from_chat, text="–¢–≤–æ–π –≥–æ–ª–æ—Å —É–∂–µ –∑–∞—Å—á–∏—Ç–∞–Ω")
            return

        approval_votes.setdefault(request_id, {})[user_id] = "–æ—Ç–∫–ª–æ–Ω—ë–Ω"
        bot.send_text(chat_id=event.from_chat, text="–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
        found_request = False
        for requester, req_dict in pending_requests.items():
            if request_id in req_dict:
                requester_id = req_dict[request_id].get("requester_id")
                request_name = req_dict[request_id].get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                group_name = req_dict[request_id].get("group_name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
                #if not req_dict[request_id].get("vote_finalized", False):
                #    finalize_vote(user_id, request_id, req_dict[request_id].get("group"))
                bot.send_text(
                    chat_id=requester_id, 
                    text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑ –≥—Ä—É–ø–ø—ã \"{group_name}\" –æ—Ç–∫–ª–æ–Ω–∏–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å \"{request_name}\""
                )
                found_request = True
                return

        if not found_request:
            logging.error(f"–ó–∞–ø—Ä–æ—Å —Å request_id {request_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    show_main_menu(bot, chat_id, chat_id in chat_members)
