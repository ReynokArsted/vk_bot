from example.features.requests import (
    show_preview_request, 
    show_available_groups
)
from example.features.groups import update_members
from example.storage.group_members import get_group_name
from example.main_menu import show_main_menu
from example.utils import create_inline_keyboard
from example.requests_menu import (
    show_requests_menu, 
    show_your_votes, 
    show_requests_for_group
)
from example.features.requests import (
    show_request_groups 
)
from example.storage.requests import (
    create_draft,
    get_draft,
    update_draft,
    get_request,
    delete_draft
)
from example.storage.votes import get_vote, add_user_to_voted_list
from example.storage.group_members import is_user_in_group
from example.handlers.remind_handler import handle_set_reminder_frequency, handle_reminder_settings

def handle_buttons(bot, event):
    from example.utils import decode_from_callback

    callback_data = event.data.get("callbackData", "")
    chat_id = event.from_chat
    user_id = event.data.get("from", {}).get("userId", "")
    is_private = ("@chat" not in chat_id)

    draft = get_draft(user_id)

    # –û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if callback_data == "no_image" and draft:
        update_draft(draft.id, image_file_id=None, stage="group")
        show_preview_request(bot, user_id)
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–µ–≤—å—é
    if callback_data == "preview_ok" and draft:
        show_available_groups(bot, user_id)
        return

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–≤—å—é
    if callback_data == "preview_edit" and draft:
        update_draft(draft.id, name=None, description=None, image_file_id=None, group_id=None, group_name=None, expiry=None, stage="name", vote_finalized=False)
        bot.send_text(chat_id=user_id, text="–ù–∞—á–Ω—ë–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:")
        return

    # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    if callback_data == "create_approval_request":
        draft_id = create_draft(user_id)
        bot.send_text(chat_id=user_id, text="–ö–∞–∫ –Ω–∞–∑–æ–≤—ë–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–ø—Ä—É–≤?")
        return

    if callback_data in {"to_main_menu", "update_members", "to_requests_menu", 
                        "show_your_requests", "show_your_votes", "settings_reminder_frequency",
                        "set_reminder_15", "set_reminder_25", "set_reminder_30", "set_reminder_60"}:
        delete_draft(user_id)
        if callback_data == "update_members":
            update_members(bot, chat_id)
        elif callback_data == "to_main_menu":
            show_main_menu(bot, chat_id, is_private)
        elif callback_data == "to_requests_menu":
            show_requests_menu(bot, chat_id)
        elif callback_data == "show_your_requests":
            show_request_groups(bot, user_id, chat_id)
        elif callback_data == "show_your_votes":
            show_your_votes(bot, user_id, chat_id)
        elif callback_data == "settings_reminder_frequency":
            handle_reminder_settings(bot, user_id)
        elif callback_data == "set_reminder_15":
            handle_set_reminder_frequency(bot, user_id, 15)
        elif callback_data == "set_reminder_25":
            handle_set_reminder_frequency(bot, user_id, 25)
        elif callback_data == "set_reminder_30":
            handle_set_reminder_frequency(bot, user_id, 30)
        elif callback_data == "set_reminder_60":
            handle_set_reminder_frequency(bot, user_id, 60)
        return

    # –í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –∏–∑ —Å–ø–∏—Å–∫–∞
    if callback_data.startswith("choose_group_") and draft:
        group_id, group_name = decode_from_callback(callback_data)
        update_draft(draft.id, group_id=group_id, group_name=group_name, stage="expiry")
        bot.send_text(
            chat_id=user_id,
            text="–í–≤–æ–¥–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                "üîπ HH:MM ‚Äì —Å–µ–≥–æ–¥–Ω—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n"
                "üîπ N ‚Äì —á–µ—Ä–µ–∑ N –º–∏–Ω—É—Ç\n"
                "üîπ DD.MM HH:MM ‚Äì —É–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\n"
                "üîπ DD.MM.YYYY HH:MM ‚Äì –ø–æ–ª–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è"
        )
        return

    if callback_data.startswith("approve_") or callback_data.startswith("reject_"):
        action, request_id = callback_data.split("_", 1)
        req = get_request(request_id)
        if not req:
            bot.send_text(chat_id=event.from_chat, text="–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø–µ
        if not is_user_in_group(req.group_id, user_id):
            bot.send_text(chat_id=event.from_chat, text="–¢—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—à—å –≤ –≥—Ä—É–ø–ø–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å —ç—Ç–∏–º –∑–∞–ø—Ä–æ—Å–æ–º")
            return

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        vote_type = "approved" if action == "approve" else "rejected"
        add_user_to_voted_list(request_id, user_id, vote_type)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        if vote_type == "approved":
            bot.send_text(chat_id=event.from_chat, text=f"–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç")
            if user_id != req.requester_id:
                bot.send_text(
                    chat_id=req.requester_id,
                    text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑ –≥—Ä—É–ø–ø—ã \"{req.group_name}\" –ø—Ä–∏–Ω—è–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å \"{req.name}\""
                )
        else:
            bot.send_text(chat_id=event.from_chat, text=f"–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω")
            if user_id != req.requester_id:
                bot.send_text(
                    chat_id=req.requester_id,
                    text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑ –≥—Ä—É–ø–ø—ã \"{req.group_name}\" –æ—Ç–∫–ª–æ–Ω–∏–ª —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å \"{req.name}\""
                )
        return


    if callback_data.startswith("view_requests_group_"):
        group_id = callback_data.removeprefix("view_requests_group_")
        show_requests_for_group(bot, user_id, group_id, chat_id)
        return
    
    if callback_data.startswith("view_request:"):
        request_id = callback_data.split(":", 1)[1]
        req = get_request(request_id)
        if not req:
            bot.send_text(chat_id=chat_id, text="–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        text = f"üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞:\n<b>{req.name or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</b>\n\n"
        if req.description:
            text += f"–û–ø–∏—Å–∞–Ω–∏–µ: {req.description}\n\n"
        text += f"üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å: {req.requester_id}\n"
        text += f"üë• –ì—Ä—É–ø–ø–∞: {req.group_name or get_group_name(req.group_id)}\n"

        print(f"[DRBUG] {req.status}")
        if req.status == "–∞pproved":
            text += f"üó≥ –°—Ç–∞—Ç—É—Å: –ø—Ä–∏–Ω—è—Ç"
        elif req.status == "rejected":
            text += f"üó≥ –°—Ç–∞—Ç—É—Å: –æ—Ç–∫–ª–æ–Ω—ë–Ω"
        elif req.status == "undecided":
            text += f"üó≥ –°—Ç–∞—Ç—É—Å: –Ω–µ —Ä–µ—à–µ–Ω–æ"
        elif req.status == "in_progress":
            text += f"üó≥ –°—Ç–∞—Ç—É—Å: –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"

        buttons = [[{"text": "–ù–∞–∑–∞–¥", "callbackData": f"back_to_group_{req.group_id}"}]]

        if req.status == "in_progress":
            existing_vote = get_vote(request_id, user_id)
            if not existing_vote:
                buttons.insert(0, [
                    {"text": "üëç –û–¥–æ–±—Ä–∏—Ç—å", "callbackData": f"approve_{request_id}"},
                    {"text": "üëé –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callbackData": f"reject_{request_id}"}
                ])

        if req.image_file_id:
            bot.send_file(
                chat_id=chat_id,
                file_id=req.image_file_id,
                caption=text,
                parse_mode="HTML",
                inline_keyboard_markup=create_inline_keyboard(buttons)
            )
        else:
            bot.send_text(
                chat_id=chat_id,
                text=text,
                parse_mode="HTML",
                inline_keyboard_markup=create_inline_keyboard(buttons)
            )
        return
    
    if callback_data.startswith("back_to_group_"):
        group_id = callback_data.split("_", 3)[3]
        show_requests_for_group(bot, user_id, group_id, chat_id)
        return
    
    show_main_menu(bot, chat_id, is_private)
