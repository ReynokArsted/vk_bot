from bot.bot import Bot
from example.bot_instance import bot
from example.main_menu import show_main_menu
from example.storage import pending_requests, chat_members, current_request, approval_votes
from example.utils import create_inline_keyboard, encode_for_callback
from example.logger import logging
import time

def send_approval_request(bot: Bot, user_id: str, group_id: str, request_id: str) -> None:
    if group_id not in chat_members:
        logging.error(f"–ì—Ä—É–ø–ø–∞ {group_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ chat_members")
        return

    members = chat_members[group_id]["members"]
    request_data = pending_requests[user_id][request_id]
    name = request_data.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    description = request_data.get("description", "")
    expiry = request_data.get("expiry", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
    group_name = request_data.get("group_name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    image_id = request_data.get("image")

    text = f"üì¢ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–ø—Ä—É–≤!\n\n" \
            f"üîπ *{name}*\n" \
            f"üìù {description}\n\n" \
            f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {user_id}\n" \
            f"üë• –ì—Ä—É–ø–ø–∞: {group_name}\n" \
            f"‚è≥ –î–æ: {expiry}"

    buttons = [
        [{"text": "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", "callbackData": f"approve_{request_id}"}],
        [{"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callbackData": f"reject_{request_id}"}]
    ]

    for member_id in members:
        if member_id == user_id:
            continue
            
        if (image_id != None and image_id != "empty"):
            bot.send_file(
                chat_id=member_id,
                file_id=image_id,
                caption=text,
                inline_keyboard_markup=create_inline_keyboard(buttons)
            )
        else:
            bot.send_text(
                chat_id=member_id,
                text=text,
                inline_keyboard_markup=create_inline_keyboard(buttons)
            )

    bot.send_text(chat_id=user_id, text="‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    show_main_menu(bot, user_id, True)

def start_vote_timer(user_id: str, request_id: str, deadline: float, group_id: str) -> None:
    sleep_duration = deadline - time.time()
    if sleep_duration > 0:
        time.sleep(sleep_duration)
    finalize_vote(user_id, request_id, group_id)    


def show_request_groups(bot: Bot, user_id: str, chat_id: str) -> None:
    user_requests = pending_requests.get(user_id, {})
    groups = {}
    for req_id, data in user_requests.items():
        grp = data.get("group", "")
        if grp:
            groups[grp] = chat_members.get(grp, {}).get("groupName", grp)
    if not groups:
        bot.send_text(chat_id=chat_id, text = "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        return
    buttons = [
        [{"text": group_name, "callbackData": f"view_requests_group_{group_id}"}]
        for group_id, group_name in groups.items()
    ]
    buttons.append([{"text": "–ù–∞–∑–∞–¥", "callbackData": "to_requests_menu"}])
    bot.send_text(chat_id=chat_id, text = "–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã", inline_keyboard_markup=create_inline_keyboard(buttons))

def show_preview_request(bot: Bot, user_id: str):
    request_id = current_request.get(user_id)
    if not request_id:
        return

    req = pending_requests[user_id][request_id]
    text = f"**–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞**\n\n" \
            f"üì¢ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–ø—Ä—É–≤!\n\n" \
            f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {req['name']}\n" \
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {req['description']}\n\n" \

    keyboard = create_inline_keyboard([
        [{"text": "‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", "callbackData": "preview_ok"}],
        [{"text": "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", "callbackData": "preview_edit"}]
    ])

    if req["image"]:  # —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞
        bot.send_file(
            chat_id=user_id, 
            file_id=req["image"], 
            caption=text, 
            inline_keyboard_markup=keyboard
        )
    else:
        bot.send_text(
            chat_id=user_id, 
            text=text, 
            inline_keyboard_markup=keyboard
        )

def show_available_groups(bot: Bot, user_id: str) -> None:
    available_groups = [
        group_info for group_info in chat_members.values() 
        if user_id in group_info.get("members", [])
    ]

    if not available_groups:
        bot.send_text(
            chat_id=user_id, 
            text = "–≠—Ç–æ–≥–æ –±–æ—Ç–∞ –Ω–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —Å–æ—Å—Ç–æ–∏—à—å"
        )
        return

    buttons = [
        [{"text": group["groupName"], 
        "callbackData": encode_for_callback(group["groupId"], group["groupName"])}]
        for group in available_groups
    ]

    bot.send_text(
        chat_id=user_id, 
        text = "–í—ã–±–∏—Ä–∞–π –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", 
        inline_keyboard_markup=create_inline_keyboard(buttons)
    )

def finalize_vote(user_id: str, request_id: str, group_id: str) -> None:
    if user_id not in pending_requests or request_id not in pending_requests[user_id]:
        return

    request_data = pending_requests[user_id][request_id]
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞–ø—Ä–æ—Å
    if request_data.get("vote_finalized", False):
        return  # –ï—Å–ª–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à—ë–Ω, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –ª–æ–≥–∏–∫—É

    # –û—Ç–º–µ—Ç–∏–º, —á—Ç–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
    request_data["vote_finalized"] = True

    votes = approval_votes.get(request_id, {})
    approved_users = [uid for uid, v in votes.items() if v == "approved" or v == "–ø—Ä–∏–Ω—è—Ç"]
    rejected_users = [uid for uid, v in votes.items() if v == "rejected" or v == "–æ—Ç–∫–ª–æ–Ω—ë–Ω"]

    approved_count = sum(1 for v in votes.values() if v in ("approved", "–ø—Ä–∏–Ω—è—Ç"))
    rejected_count = sum(1 for v in votes.values() if v in ("rejected", "–æ—Ç–∫–ª–æ–Ω—ë–Ω"))

    request_name = request_data.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    request_group = request_data.get("group_name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    requester_id = request_data.get("requester_id", user_id)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ—É –æ –≥—Ä—É–ø–ø–µ
    group_info = chat_members.get(group_id, {})
    raw_members = group_info.get("members", [])

    # –°–ª–æ–≤–∞—Ä—å user_id -> display_name
    member_names = {
        m['userId']: m.get('name', m['userId']) for m in raw_members if isinstance(m, dict)
    }

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏
    def get_display_name(uid: str) -> str:
        return member_names.get(uid, uid)

    # –°–ø–∏—Å–∫–∏ –∏–º—ë–Ω
    approved_names = ", ".join(get_display_name(uid) for uid in approved_users) or "–Ω–∏–∫—Ç–æ"
    rejected_names = ", ".join(get_display_name(uid) for uid in rejected_users) or "–Ω–∏–∫—Ç–æ"

    non_voters = [
        uid for uid in member_names.keys()
        if uid not in votes and uid != requester_id
    ]
    non_voter_names = ", ".join(get_display_name(uid) for uid in non_voters) or "–Ω–∏–∫—Ç–æ"


    # –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    if approved_count > rejected_count:
        result_text = "–ò—Ç–æ–≥ - ‚úÖ –ó–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω!"
    elif rejected_count > approved_count:
        result_text = "–ò—Ç–æ–≥ - ‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω!"
    else:
        result_text = "–ò—Ç–æ–≥ - ü§∑ –ì–æ–ª–æ—Å–∞ —Ä–∞–∑–¥–µ–ª–∏–ª–∏—Å—å –∏ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ"

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    summary = (
        f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{request_name}\" –≤ –≥—Ä—É–ø–ø–µ \"{request_group}\" –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
        f"‚úÖ –ó–∞ ({approved_count}): {approved_names}\n"
        f"‚ùå –ü—Ä–æ—Ç–∏–≤ ({rejected_count}): {rejected_names}\n"
        f"‚ùî –ù–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏: {non_voter_names}\n\n"
        f"{result_text}"
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_file_id = request_data.get("image")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if image_file_id != None:
        for member in raw_members:
            bot.send_file(chat_id=member, file_id=image_file_id, caption=summary)
    else:
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        for member in raw_members:
            bot.send_text(chat_id=member, text=summary)    

    # –û—á–∏—Å—Ç–∫–∞
    del pending_requests[user_id][request_id]
    if request_id in approval_votes:
        del approval_votes[request_id]
    if not pending_requests[user_id]:
        del pending_requests[user_id]