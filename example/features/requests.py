from example.utils import create_inline_keyboard, encode_for_callback
from example.logger import logging
from example.main_menu import show_main_menu
from example.storage.requests import (
    get_request, 
    get_draft, 
    get_requests_by_user,
    finalize_draft,
    update_request_status
)
from example.storage.group_members import (
    get_group_members, 
    get_group_name, 
    get_user_display_name, 
    get_user_groups
)
from example.storage.votes import get_votes
from bot.bot import Bot
from example.bot_instance import bot
import time

def send_approval_request(bot: Bot, user_id: str, group_id: str, request_id: str) -> None:
    members = get_group_members(group_id)
    req = get_draft(user_id)
    if not req or not members:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å: request={req}, members={members}")
        return

    text = f"üì¢ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–ø—Ä—É–≤!\n\n" \
        f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {req.name}\n" \
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{req.description}\n\n" \
        f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {user_id}\n" \
        f"üë• –ì—Ä—É–ø–ø–∞: {get_group_name(group_id)}\n" \
        f"‚è≥ –î–æ: {req.expiry or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"

    buttons = [
        [{"text": "‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", "callbackData": f"approve_{request_id}"}],
        [{"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callbackData": f"reject_{request_id}"}]
    ]

    bot.send_text(chat_id=user_id, text="‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    for member_id in members:
        if req.image_file_id:
            bot.send_file(
                chat_id=member_id,
                file_id=req.image_file_id,
                caption=text,
                inline_keyboard_markup=create_inline_keyboard(buttons)
            )
        else:
            bot.send_text(
                chat_id=member_id,
                text=text,
                inline_keyboard_markup=create_inline_keyboard(buttons)
            )
    finalize_draft(request_id)

def start_vote_timer(user_id: str, request_id: str, deadline: float, group_id: str) -> None:
    sleep_duration = deadline - time.time()
    if sleep_duration > 0:
        time.sleep(sleep_duration)
    finalize_vote(user_id, request_id, group_id)

def finalize_vote(user_id: str, request_id: str, group_id: str) -> None:
    req = get_request(request_id)
    if not req or req.stage == "finalized":
        return

    votes = {v.user_id: v.vote for v in get_votes(request_id)}
    members = get_group_members(group_id)
    member_names = {uid: get_user_display_name(uid) for uid in members}

    approved_users = [uid for uid, v in votes.items() if v in ("approved", "–ø—Ä–∏–Ω—è—Ç")]
    rejected_users = [uid for uid, v in votes.items() if v in ("rejected", "–æ—Ç–∫–ª–æ–Ω—ë–Ω")]
    non_voters = [uid for uid in members if uid not in votes]

    approved_names = ", ".join(member_names[uid] for uid in approved_users) or "–Ω–∏–∫—Ç–æ"
    rejected_names = ", ".join(member_names[uid] for uid in rejected_users) or "–Ω–∏–∫—Ç–æ"
    non_voter_names = ", ".join(member_names[uid] for uid in non_voters) or "–Ω–∏–∫—Ç–æ"

    approved_count = len(approved_users)
    rejected_count = len(rejected_users)
    
    if approved_count > rejected_count:
        result_text = "–ò—Ç–æ–≥ - ‚úÖ –ó–∞–ø—Ä–æ—Å –æ–¥–æ–±—Ä–µ–Ω!"
        update_request_status(request_id, "approved")  # –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç
    elif rejected_count > approved_count:
        result_text = "–ò—Ç–æ–≥ - ‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω!"
        update_request_status(request_id, "rejected")  # –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω—ë–Ω
    else:
        result_text = "–ò—Ç–æ–≥ - ü§∑ –ì–æ–ª–æ—Å–∞ —Ä–∞–∑–¥–µ–ª–∏–ª–∏—Å—å –∏ —Ä–µ—à–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç–æ"
        update_request_status(request_id, "undecided")  # –ù–∏—á—å—è (–∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥–æ–ª–æ—Å–æ–≤)


    summary = (
        f"–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É \"{req.name}\" –≤ –≥—Ä—É–ø–ø–µ \"{get_group_name(group_id)}\" –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n"
        f"‚úÖ –ó–∞ ({approved_count}): {approved_names}\n"
        f"‚ùå –ü—Ä–æ—Ç–∏–≤ ({rejected_count}): {rejected_names}\n"
        f"‚ùî –ù–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏: {non_voter_names}\n\n"
        f"{result_text}"
    )

    for member_id in members:
        if req.image_file_id:
            bot.send_file(chat_id=member_id, file_id=req.image_file_id, caption=summary)
        else:
            bot.send_text(chat_id=member_id, text=summary)

def show_preview_request(bot: Bot, user_id: str) -> None: 
    req = get_draft(user_id)
    if not req:
        print(f"\n !!! 222 : {req}\n")
        return

    text = f"**–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞**\n\n" \
        f"üì¢ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–ø—Ä—É–≤!\n\n" \
        f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: {req.name}\n" \
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {req.description}"

    keyboard = create_inline_keyboard([
        [{"text": "‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", "callbackData": "preview_ok"}],
        [{"text": "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", "callbackData": "preview_edit"}]
    ])

    if req.image_file_id:
        bot.send_file(chat_id=user_id, file_id=req.image_file_id, caption=text, inline_keyboard_markup=keyboard)
    else:
        bot.send_text(chat_id=user_id, text=text, inline_keyboard_markup=keyboard)

def show_request_groups(bot: Bot, user_id: str, chat_id: str) -> None:
    user_group_ids = get_user_groups(user_id)
    groups = {group_id: get_group_name(group_id) for group_id in user_group_ids}
    
    if not groups:
        bot.send_text(chat_id=chat_id, text="–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≥—Ä—É–ø–ø")
        return

    buttons = [
        [{"text": group_name, "callbackData": f"view_requests_group_{group_id}"}]
        for group_id, group_name in groups.items()
    ]
    buttons.append([{"text": "–ù–∞–∑–∞–¥", "callbackData": "to_requests_menu"}])

    bot.send_text(chat_id=chat_id, text="–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã", inline_keyboard_markup=create_inline_keyboard(buttons))

def show_request_details(bot: Bot, user_id: str, chat_id: str, request_id: str) -> None:
    req = get_request(request_id)
    if not req:
        bot.send_text(chat_id=chat_id, text="–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    text = (
        f"üìå –ù–∞–∑–≤–∞–Ω–∏–µ: *{req.name or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}*\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {req.description or '‚Äî'}\n"
        f"üìé –ì—Ä—É–ø–ø–∞: {req.group_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"üìÖ –°—Ç–∞—Ç—É—Å: {req.status}\n"
    )

    buttons = [[{"text": "–ù–∞–∑–∞–¥", "callbackData": f"view_requests_group_{req.group_id}"}]]
    bot.send_text(chat_id=chat_id, text=text, inline_keyboard_markup=create_inline_keyboard(buttons))


def show_available_groups(bot: Bot, user_id: str) -> None:
    group_ids = get_user_groups(user_id)

    groups = [
        {"groupId": gid, "groupName": get_group_name(gid)}
        for gid in group_ids
    ]

    if not groups:
        bot.send_text(chat_id=user_id, text="–≠—Ç–æ–≥–æ –±–æ—Ç–∞ –Ω–µ—Ç –≤ –≥—Ä—É–ø–ø–∞—Ö, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —Å–æ—Å—Ç–æ–∏—à—å")
        return

    buttons = [
        [{"text": g["groupName"], "callbackData": encode_for_callback(g["groupId"], g["groupName"])}]
        for g in groups
    ]

    bot.send_text(
        chat_id=user_id,
        text="–í—ã–±–∏—Ä–∞–π –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
        inline_keyboard_markup=create_inline_keyboard(buttons)
    )
